const benchUtils_1 = require("../../benchUtils");
/**
 * Created by flo on 02/02/2017.
 */
var spiders = require("../../../src/spiders");
class Worker extends spiders.Actor {
    constructor() {
        super(...arguments);
        this.masterRef = null;
        this.id = null;
        this.threshold = null;
        this.size = null;
    }
    config(masterRef, id, threshold, size) {
        this.masterRef = masterRef;
        this.id = id;
        this.threshold = threshold;
        this.size = size;
        this.parent.actorInit();
    }
    arraycopy(a1, start1, a2, start2, until) {
        var index = start2;
        for (var i = start1; i < until; i++) {
            a2[index] = a1[i];
            index += 1;
        }
    }
    boardValid(depth, data) {
        var p = 0;
        var q = 0;
        for (var i = 0; i < depth; i++) {
            p = data[i];
            for (var j = (i + 1); j < data; j++) {
                q = data[j];
                if (q == p || q == p - (j - i) || q == p + (j - 1)) {
                    return false;
                }
            }
        }
        return true;
    }
    workSequential(data, depth) {
        if (this.size == depth) {
            this.masterRef.result();
        }
        else {
            var b = [];
            for (var i = 0; i < depth + 1; i++) {
                b.push(0);
            }
            var i = 0;
            while (i < this.size) {
                this.arraycopy(data, 0, b, 0, depth);
                b[depth] = i;
                if (this.boardValid(depth + 1, b)) {
                    this.workSequential(b, depth + 1);
                }
                i += 1;
            }
        }
    }
    work(priority, data, depth) {
        if (this.size == depth) {
            this.masterRef.result();
        }
        else if (depth >= this.threshold) {
            this.workSequential(data, depth);
        }
        else {
            var newPriority = priority - 1;
            var newDepth = depth + 1;
            var i = 0;
            while (i < this.size) {
                var b = [];
                for (var j = 0; j < newDepth; j++) {
                    b[j] = 0;
                }
                this.arraycopy(data, 0, b, 0, depth);
                b[depth] = i;
                if (this.boardValid(newDepth, b)) {
                    this.masterRef.sendWork(newPriority, new this.ArrayIsolate(b), newDepth);
                }
                else {
                }
                i += 1;
            }
        }
        this.masterRef.done();
    }
}
class Master extends spiders.Actor {
    constructor() {
        super(...arguments);
        this.solutions = null;
        this.priorities = null;
        this.numWorkers = null;
        this.workers = [];
        this.messageCounter = 0;
        this.numWorkersTerminated = 0;
        this.numWorkSent = 0;
        this.numWorkCompleted = 0;
        this.resultCounter = 0;
    }
    config(solutions, priorities, numWorkers) {
        this.solutions = solutions;
        this.priorities = priorities;
        this.numWorkers = numWorkers;
    }
    addWorker(workerRef, id) {
        this.workers[id] = workerRef;
    }
    configDone() {
        this.parent.actorInit();
    }
    start() {
        this.sendWork(this.priorities, [], 0);
    }
    sendWork(priority, data, depth) {
        this.workers[this.messageCounter].work(priority, new this.ArrayIsolate(data), depth);
        this.messageCounter = (this.messageCounter + 1) % this.numWorkers;
        this.numWorkSent += 1;
    }
    result() {
        this.resultCounter += 1;
        if (this.resultCounter >= this.solutions) {
            this.parent.end();
        }
    }
    done() {
        this.numWorkCompleted += 1;
        if (this.numWorkCompleted == this.numWorkSent) {
            this.parent.end();
        }
    }
}
class NQueensFirstNSolutionsApp extends spiders.Application {
    constructor(bench) {
        super();
        this.actorsInitialised = 0;
        this.actorsExited = 0;
        this.bench = bench;
    }
    setup() {
        this.masterRef = this.spawnActor(Master);
        this.masterRef.config(benchUtils_1.BenchConfig.nQueensSolutions, benchUtils_1.BenchConfig.nQueensPriorities, benchUtils_1.BenchConfig.nQueensWorkers);
        var id = 0;
        for (var i = 0; i < benchUtils_1.BenchConfig.nQueensWorkers; i++) {
            var workerRef = this.spawnActor(Worker);
            workerRef.config(this.masterRef, id, benchUtils_1.BenchConfig.nQueensThreshold, benchUtils_1.BenchConfig.nQueensSize);
            this.masterRef.addWorker(workerRef, id);
            id += 1;
        }
        this.masterRef.configDone();
    }
    checkConfig() {
        if (this.actorsInitialised == 1 + benchUtils_1.BenchConfig.nQueensWorkers) {
            this.masterRef.start();
        }
    }
    actorInit() {
        this.actorsInitialised += 1;
        this.checkConfig();
    }
    end() {
        this.bench.stopPromise.resolve();
    }
}
class SpiderNQueensFirstNSolutionsBench extends benchUtils_1.SpiderBenchmark {
    constructor() {
        super("Spiders.js N Queens First N Solutions", "Spiders.js N Queens First N Solutions cycle completed", "Spiders.js N Queens First N Solutions completed", "Spiders.js N Queens First N Solutions scheduled");
    }
    runBenchmark() {
        this.nQueensFirstNSolutionsApp = new NQueensFirstNSolutionsApp(this);
        this.nQueensFirstNSolutionsApp.setup();
    }
    cleanUp() {
        this.nQueensFirstNSolutionsApp.kill();
    }
}
exports.SpiderNQueensFirstNSolutionsBench = SpiderNQueensFirstNSolutionsBench;
//# sourceMappingURL=NQueensFirstNSolutions.js.map